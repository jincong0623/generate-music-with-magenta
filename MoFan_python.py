

#  "#"表示单行注释
# “'''  '''”三个单引号表示大段的注释
# 每小节的内容分别用''' '''注释了，需要看结果可以分别去掉注释符号run一下~



#---------------------print-------------------------------
'''print("sdfadf")
print('sdfafafwer')#  ""   ''  都可以作为字符串的引用

print(1+1)#可以直接做简单的运算

print(int(00000000000000))
print(str(1+1))#强制类型转换

print(5*3);print("python") #注意：python中如果换行输入，可以不加“;”，如果要在同一行表示不同语句，加“;”可以吧不同语句分隔开'''
#  不同的print输出，会自动换行

#--------------------------   + - * / // %  **  ----------------------------------
'''print(4+3) #加法
print(8-10) #减法
print(6*6) #乘法
print(6/7) #除法（正常的除法，该是多少，就是多少）
print(79%9) #除法（结果是两数相除后的余数）
print(79//9) #除法（结果是两数相除后的整数）
print(4**2)  #表示4的平方，“x**y”等价于pow（x,y）,表示：x的y次方'''

#--------------------------    定义自变量   ---------------------------------
# 定义自变量时系统会智能的分辨变量的类型，不需要我们给出
'''a=2
c="wer"
f_q=666  # 两个或多个单词组成自变量，需要用下划线将它们相连，不让你会报错
d=a+f_q
print(a,c,f_q,d)

a,b,c=4,5,6
print(a,b,c)  # 可以同时定义多个值，并同时输出多个值'''

#---------------------------  while 循环  -----------------------------------
'''a=1
while a<10:
    print(a)
    a=a+1
print('我在while外')
#  while  的用法为  “while  判断语句  :”,“：”不能丢
# 回车后，下一行会“空4格”，不需要打“{}”来确认那些语句是while内的语句，只需要在“空4格”的地方写语句即可，写不在while中的语句时，输入对其while即可
# 当判断语句是“true”时，循环继续，“false”时结束
while True:
    print(1)
#当条件永远为 真 时，程序进入死循环'''

#----------------------------   for  循环  -----------------------------------------
'''list=[12,32,45,67,24,978,'456','fh',000,'000']
for i in list:
    print(i)
    print("in")
print("out")
#  格式和while相同，有4个空格就代表在循环内；反之在循环外
#  for循环格式“ for  定义一个自变量  in  给一个范围（即;在哪里循环） :”  ":"不能丢
for i in range(6,83,7) :
    print(i)
    print("in")
#  range 是python的一个内置函数，他有三个参数，分别是“起始数值”，“终值数值”，“步长”
#  起始数值：循环会从这个数开始做需要的运算
#  终值数值：循环到这个数，但不包括这个数使结束
#  步长：内次循环取出来的数和上一个数之间差多少；可以不设置，默认步长为1'''

# --------------------------  if ,else,elif ------------------------------------
'''a=1
b=2
c=0
if a<b<c :
    print("a<b<c")
elif a<b>c :
    print("a<b>c")
elif a<b:
    print("a<b")
#这里还可以有n个elif
else:
    print("-----")
#“空4格”格式相同
#  if/elif用法“if  判断语句  : ”
#  lese 用法“else  : ”
#  当同时满足多个if时，因为这个 if-else 判断是一个整体，所以系统只会得出第一个满足条件的答案，然后就跳出这个结构，不再做这个结构的运算'''

#---------------------------------   def 定义函数   -----------------------------------
'''def function(x,y,a=1,b=4):
    sum=x+y+a+b
    return sum
d=function(666,-606)
print(d)
#  定义函数需要“def”，具体格式为“def  函数名称（可以给传进来的参数设施默认值，也可以不设）  :  ”
#  “空4格”格式相同
#  参数传递和C语言规则一样
#  函数只有在调用的时候才做运算，否则不参加运算

def fun(q,w,e):
    print("q is ",q,"!\n"
          "w is ",w,"!\n"
          "e is ",e,"!")
fun(w=6,q=5,e=4)
#或者是这种，“\n”表示换行，要在“”之中
#在传递参数的时候，可以不按顺序传递，只需要标清是传给那个即可。'''

# -------------------------全局变量、局部变量 ----------------------------------
'''qqq=100
rrr=250
def fun():
    www=200
    #global rrr  #可以在局部函数内部通过“global”，把它定义成全局变量，影响由输出可以看出来
    rrr=500
print(qqq)
print("past rrr is : ",rrr)
fun()
print("last rrr is : ",rrr)
#print(www)  # 这里会报错，因为www是局部变量，在整个函数的时候，并没有这个变量，所以报错'''


#-------------------------------- 读写文件 ----------------------------------------
'''text='aaa\nnnn\nmmm\nsss\neee'
# 定义一个变量存储需要编写的内容，也可以定义多个
my_file=open('my file.txt','w')
# ”my_file”是一个自变量，可以根据自己的习惯命名
# “open”是一个关键字，用来打开文件，这个文件需要在正在编辑的“.py”的工程文件中，如果没有，系统会自动创建新的空的文件，文件名即open内的第一个参数。
# 第一个参数是文件名，第二个参数是对这个文件修改的方式‘w’是write（只写），‘r’是read（只读），‘a’是append（添加，也就是改都原有文件内容）
my_file.write(text)  #把变量的内容填进去
my_file.close()  # 为了保证文件的完整性和安全性，在编辑完之后，一定要关闭

file=open('my file.txt','r')  # 只读文件
file1=file.read()  # 会读取全部的文件内容,并按文件格式输出
print(file1)
file2=file.readline()
print(file2)# 会读取文件中的一行文字，第几次readline，就读出第几行
file3=file.readlines()
print(file3)# 会读取文件中所有内容，以数组的形式呈现，按行分开，每个元素之间用“，”分隔。
# ReadLine原理：文件的存储方式是“数组（列表）”，即一个有序的list，文件里每行的内容会成为list中的一个元素，然后存储，读取时会按存储顺序一个一个读取。
###########################################
#  这里为什么不能像视频中按行输出呢？？？ #
###########################################'''


#  -------------------------------- class 类  --------------------------------------
'''#  “class”是类的关键字，习惯上他定义的自变量，第一个字母会大写
#  “class”使用格式“class  自变量  : ”，之后“空4格”格式不变
class Calculator :
    name = 'this is a calculator'
    price = 998
    #这里的name price都是类的“属性”,且是“共有属性”，如果需要还可以加更多
    def shuxing(self) :
        print(self.name)  #如果没有self呢----会报错，因为name是“类”中定义的变量，调用时一定要“self”
        print(self.price)
    #这里的 def 函数，是类的“功能”，可以添加多个
    #定义函数时的“self”是必须要有的！！指代“此类本身”，主调用时不需要给它赋值（就当他不存在即可），但是传递到类本身时，类需要self来进行识别
    def add(self,x,y) :
        result=x+y
        print(result)   #为什么这里不需要self.result????----因为是“类”中“函数内”声明的变量，所以不需要加self
        print(x+y)
    def minus(self,x,y):
        print(x-y)
a=Calculator()  # a是主函数中定义的一个“个体”，把 类Calculator 赋给它，注意有括号（）
print(a.name,a.price)
print(a.add(7,4))   # 设计输出，验证答案'''

# ---------------------------------------  __init__ 初始类 ---------------------------------
'''# init即initial，初始的，原本的，这个是用来定义类最初的一些属性的  函数名  。
class Calculator :
    def __init__(self,name,price,hight,width,weight) : # 这里也可以设置默认值
        self.n = name
        self.p=price
        self.h=hight
        self.wt=width
        self.wg=weight
#这些是定义的一些属性，但由于属性的具体值是我们输入的时候给出的，所以是“人为给出的属性”
b=Calculator('calculator',666,5,10,50)
#然后验证结果：
print(b.n,b.wt,b.wg)'''

#  ---------------------------  input  ----------------------------------
'''# 即在程序运行过程中，可以让运行者输入一些值，类似C语言中的scarf作用，也就是一个“交互界面”
a=input('balabalabala是什么意思呢？') # a 就被赋予了我们输入的值，引号内是我们给出的 提示语
# input 的返回值是“字符串（string）”，如果需要其他类型，可以尝试强制转换
print(a)'''

#  ---------------------------- 元组  列表  ------------------------------------
'''# 元组： tuple（他们有自己的内部顺序）
# 列表： list（他们有自己的内部顺序）
a_tuple=(2,3,4,5,6,9)
b_tuple=1,3,5,7,9,0  # tuple  的两种定义方法
c_list=[2,4,6,8,0,9] # list 的定义方法
for exam in a_tuple: # 输出测试1
    print(exam)
for exam1 in range(len(b_tuple)):
    print("序号：",exam1,"  数值：",b_tuple[exam1]) # 这里类似数组的使用，元组和列表都可以用“元组变量/列表变量名[第几个值]”的形式'''

# ------------------------列表 ---------------------
'''a=[12,435,8678,3,89,0,432,666] # 建立一个列表
print(a)
a.append(888) # append 是在原始列表最后一个值之后添加内容
print(a)
a.insert(2,888) # insert 第一个参数是指：添加的参数是列表中的“第几个”（从0开始）；第二个参数是指：添加内容
print(a)
a.remove(666) # remove 是指从列表中删除（）中第一次出现的内容
print(a)
print(a[1:4]) # ":" 代表从哪到哪。如果是从头开始，可以省略冒号前的值；如果要一直输出到最后，可以省略冒号后的值
print(a[-1]) # "-1" 代表最后一个值，同理，“-2”会代表倒数第二个，以此类推
print(a.index(3)) # index 表示“索引”，可以找到列表中第 n（这里n=3） 位的值
print(a.count(0)) # count 表示“计数”，可以计算出“某个值（这里是0）”在列表中出现了几次
a.sort() # sort 表示“排序”，默认把列表中的值由小到大排序（列表中不能有字符串，不然会报错）
# sort 是 直接改变原数组 a 的顺序,如果要降序排列，则“sort(reverse=Ture)”即可
print(a)'''

# ------------------------------ 多维数组 --------------------------------------
'''a=[1,2,3,4,5] # 一维数组，其实可以写成“a=[[1,2,3,4,5]]”
b=[[1324,435,54],[32,6,78],[0]] # 二维数组，其他的以此类推
print(a)
print(b)'''

# ---------------------------- 字典 -----------------------------
'''# 一个没有顺序的东西（元组、列表都有顺序）
dict={'chinese:':99,'maths:':100,'english:':95}
# 字典格式：“{key1:value1 , key2:value2 , ……}”；key和value可以是数字，也可以是字符串，value还可以是函数、字典等等；key和value是一一对应的
print(dict['english:']) # 输出方法
del dict['chinese:'] # del=delete ,删除字典中某些项的存在
print(dict)
dict['z']={666:'hahaha',777:'xixixi'}
dict['a']=75
print(dict)
print(dict['z'][666])'''

# --------------------------------- import 载入模块 ----------------------------
